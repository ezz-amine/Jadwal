// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const archiveEntry = `-- name: ArchiveEntry :one
UPDATE todo_entry
SET is_archived = ?
WHERE id = ?
RETURNING id, content, is_done, is_archived, table_id
`

type ArchiveEntryParams struct {
	IsArchived sql.NullBool
	ID         int64
}

func (q *Queries) ArchiveEntry(ctx context.Context, arg ArchiveEntryParams) (TodoEntry, error) {
	row := q.db.QueryRowContext(ctx, archiveEntry, arg.IsArchived, arg.ID)
	var i TodoEntry
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsDone,
		&i.IsArchived,
		&i.TableID,
	)
	return i, err
}

const countTableEntries = `-- name: CountTableEntries :one

SELECT COUNT(*) FROM todo_entry
WHERE table_id = ?
`

// Aggregate operations
func (q *Queries) CountTableEntries(ctx context.Context, tableID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTableEntries, tableID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEntry = `-- name: CreateEntry :one
INSERT INTO todo_entry (content, is_done, table_id)
VALUES (?, false, ?)
RETURNING id, content, is_done, is_archived, table_id
`

type CreateEntryParams struct {
	Content string
	TableID int64
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (TodoEntry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.Content, arg.TableID)
	var i TodoEntry
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsDone,
		&i.IsArchived,
		&i.TableID,
	)
	return i, err
}

const createTable = `-- name: CreateTable :one
INSERT INTO todo_table (title)
VALUES (?)
RETURNING id, title
`

func (q *Queries) CreateTable(ctx context.Context, title string) (TodoTable, error) {
	row := q.db.QueryRowContext(ctx, createTable, title)
	var i TodoTable
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE FROM todo_entry
WHERE id = ?
`

func (q *Queries) DeleteEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, id)
	return err
}

const deleteTable = `-- name: DeleteTable :exec
DELETE FROM todo_table
WHERE id = ?
`

func (q *Queries) DeleteTable(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTable, id)
	return err
}

const getEntry = `-- name: GetEntry :one

SELECT id, content, is_done, is_archived, table_id FROM todo_entry
WHERE id = ?
`

// TodoEntry operations
func (q *Queries) GetEntry(ctx context.Context, id int64) (TodoEntry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, id)
	var i TodoEntry
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsDone,
		&i.IsArchived,
		&i.TableID,
	)
	return i, err
}

const getTable = `-- name: GetTable :one

SELECT id, title FROM todo_table
WHERE id = ?
`

// TodoTable operations
func (q *Queries) GetTable(ctx context.Context, id int64) (TodoTable, error) {
	row := q.db.QueryRowContext(ctx, getTable, id)
	var i TodoTable
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const getTableByTitle = `-- name: GetTableByTitle :one
SELECT id, title FROM todo_table
WHERE title = ?
`

func (q *Queries) GetTableByTitle(ctx context.Context, title string) (TodoTable, error) {
	row := q.db.QueryRowContext(ctx, getTableByTitle, title)
	var i TodoTable
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}

const listAllEntries = `-- name: ListAllEntries :many
SELECT id, content, is_done, is_archived, table_id FROM todo_entry
ORDER BY table_id, id
`

func (q *Queries) ListAllEntries(ctx context.Context) ([]TodoEntry, error) {
	rows, err := q.db.QueryContext(ctx, listAllEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoEntry
	for rows.Next() {
		var i TodoEntry
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.IsDone,
			&i.IsArchived,
			&i.TableID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntries = `-- name: ListEntries :many
SELECT id, content, is_done, is_archived, table_id FROM todo_entry
WHERE table_id = ?
ORDER BY id
`

func (q *Queries) ListEntries(ctx context.Context, tableID int64) ([]TodoEntry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, tableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoEntry
	for rows.Next() {
		var i TodoEntry
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.IsDone,
			&i.IsArchived,
			&i.TableID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesByStatus = `-- name: ListEntriesByStatus :many
SELECT id, content, is_done, is_archived, table_id FROM todo_entry
WHERE table_id = ? AND is_done = ?
ORDER BY id
`

type ListEntriesByStatusParams struct {
	TableID int64
	IsDone  sql.NullBool
}

func (q *Queries) ListEntriesByStatus(ctx context.Context, arg ListEntriesByStatusParams) ([]TodoEntry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByStatus, arg.TableID, arg.IsDone)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoEntry
	for rows.Next() {
		var i TodoEntry
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.IsDone,
			&i.IsArchived,
			&i.TableID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTables = `-- name: ListTables :many
SELECT id, title FROM todo_table
ORDER BY title
`

func (q *Queries) ListTables(ctx context.Context) ([]TodoTable, error) {
	rows, err := q.db.QueryContext(ctx, listTables)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoTable
	for rows.Next() {
		var i TodoTable
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveEntry = `-- name: MoveEntry :one
UPDATE todo_entry
SET table_id = ?
WHERE id = ?
RETURNING id, content, is_done, is_archived, table_id
`

type MoveEntryParams struct {
	TableID int64
	ID      int64
}

func (q *Queries) MoveEntry(ctx context.Context, arg MoveEntryParams) (TodoEntry, error) {
	row := q.db.QueryRowContext(ctx, moveEntry, arg.TableID, arg.ID)
	var i TodoEntry
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsDone,
		&i.IsArchived,
		&i.TableID,
	)
	return i, err
}

const updateEntryContent = `-- name: UpdateEntryContent :one
UPDATE todo_entry
SET content = ?
WHERE id = ?
RETURNING id, content, is_done, is_archived, table_id
`

type UpdateEntryContentParams struct {
	Content string
	ID      int64
}

func (q *Queries) UpdateEntryContent(ctx context.Context, arg UpdateEntryContentParams) (TodoEntry, error) {
	row := q.db.QueryRowContext(ctx, updateEntryContent, arg.Content, arg.ID)
	var i TodoEntry
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsDone,
		&i.IsArchived,
		&i.TableID,
	)
	return i, err
}

const updateEntryStatus = `-- name: UpdateEntryStatus :one
UPDATE todo_entry
SET is_done = ?
WHERE id = ?
RETURNING id, content, is_done, is_archived, table_id
`

type UpdateEntryStatusParams struct {
	IsDone sql.NullBool
	ID     int64
}

func (q *Queries) UpdateEntryStatus(ctx context.Context, arg UpdateEntryStatusParams) (TodoEntry, error) {
	row := q.db.QueryRowContext(ctx, updateEntryStatus, arg.IsDone, arg.ID)
	var i TodoEntry
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.IsDone,
		&i.IsArchived,
		&i.TableID,
	)
	return i, err
}

const updateTable = `-- name: UpdateTable :one
UPDATE todo_table
SET title = ?
WHERE id = ?
RETURNING id, title
`

type UpdateTableParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateTable(ctx context.Context, arg UpdateTableParams) (TodoTable, error) {
	row := q.db.QueryRowContext(ctx, updateTable, arg.Title, arg.ID)
	var i TodoTable
	err := row.Scan(&i.ID, &i.Title)
	return i, err
}
